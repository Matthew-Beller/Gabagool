from gooey import Gooey, GooeyParser, local_resource_path

import library.subtitle_functions as subtitle_functions
import library.video_editing_functions as video_editing_functions

# Customizes settings for GooeyGUI
@Gooey(optional_cols = 2, progress_regex=r"^progress: (?P<current>\d+)/(?P<total>\d+)$",
        progress_expr="current / total * 100",
       disable_progress_bar_animation=True,
       hide_progress_msg=True,
       timing_options={
            'show_time_remaining':True,
            'hide_time_remaining_on_complete':True
        },
        program_name="Gabagool",
        image_dir=local_resource_path('images')
        )

# Creates GUI
def prompt_user():
    parser = GooeyParser()
    subparser = parser.add_subparsers(dest='action')
    subparser.required = True
    # Underscores in menu names necessary to be processed as single argument
    single_subtitle_file = subparser.add_parser("Single_Subtitle_File")

    batch_subtitle_files = subparser.add_parser("Batch_Subtitle_Files")

    create_video_file = subparser.add_parser("Create_Video_File")

    # Contents of Single_Subtitle_File menu
    single_subtitle_file.add_argument('source_file_video', help="Source file for video clips", metavar="Video File", widget="FileChooser")
    single_subtitle_file.add_argument('source_file_subtitle', help="Subtitle file for video. Must be .srt", metavar="Subtitle File", widget="FileChooser")
    single_subtitle_file.add_argument('key_phrase_input_raw', metavar="Search Phrases", help="Delimit lists of keywords with |@|")
    single_subtitle_file.add_argument('output_directory', metavar="Output Directory", widget="DirChooser")
    single_subtitle_file.add_argument('--ignore_spaces', metavar="Ignore Spaces during Search", help=" Ignore", widget="CheckBox", action="store_false", default=True)
    single_subtitle_file.add_argument('--ignore_punctuation', metavar="Ignore Punctuation during Search", help=" Ignore", widget="CheckBox", action="store_false", default=True)
    single_subtitle_file.add_argument('--case_sensitive', metavar="Case Sensitive Search", help=" Recognize Case", widget="CheckBox", action="store_true", default=False)

    # Contents of Batch_Subtitle_Files menu
    batch_subtitle_files.add_argument('source_directory_video', help="Source directory of files for video clips", metavar="Video Files Directory", widget="DirChooser")
    batch_subtitle_files.add_argument('--ignore_video_input_raw', metavar="Ignore Phrase Video", help="Ignore a certain phrase in video file names. Delimit lists of phrases with |@|", default="", type=str, required=False)
    batch_subtitle_files.add_argument('source_directory_subtitle', help="Source directory of subtitle files for videos. Must be .srt files.", metavar="Subtitle Files Directory", widget="DirChooser")
    batch_subtitle_files.add_argument('--ignore_subtitle_input_raw', metavar="Ignore Phrase Subtitle", help="Ignore a certain phrase in subtitle file names.  Delimit lists of phrases with |@|", default="", type=str, required=False)
    batch_subtitle_files.add_argument('key_phrase_input_raw', metavar="Search Phrases", help="Delimit lists of keywords with |@|", type=str)
    batch_subtitle_files.add_argument("save_style", metavar="Save Style", widget="Dropdown", choices=['One file', 'File for each folder', 'File for each video'])
    batch_subtitle_files.add_argument('output_directory', metavar="Output Directory", widget="DirChooser")
    batch_subtitle_files.add_argument('--ignore_spaces', metavar="Ignore Spaces during Search", help=" Ignore", widget="CheckBox", action="store_false", default=True)
    batch_subtitle_files.add_argument('--ignore_punctuation', metavar="Ignore Punctuation during Search", help=" Ignore", widget="CheckBox", action="store_false", default=True)
    batch_subtitle_files.add_argument('--case_sensitive', metavar="Case Sensitive Search", help=" Recognize Case", widget="CheckBox", action="store_true", default=False)
    batch_subtitle_files.add_argument('confidence_level', metavar="Confidence Level", help="Confidence level needed to automatically match subtitle and video file names", widget="Slider", gooey_options={'min': 0, 'max': 100, 'increment': 1}, default = 70)

    # Contents of Create_Video_File menu
    create_video_file.add_argument('source_file_subtitle_found', metavar="Searched Subtitle File", help="File generated by Single Subtitle File or Batch Subtitle Files options", widget="FileChooser")
    create_video_file.add_argument('output_directory', metavar="Output Directory", widget="DirChooser")
    create_video_file.add_argument('--buffer_time_start', metavar="Start Buffer", help="Time in seconds before quote to begin clip", nargs="?", const="", default=0, type=int, required=False)
    create_video_file.add_argument('--buffer_time_end', metavar="End Buffer", help="Time in seconds before quote to after clip", nargs="?", const="", default=0, type=int, required=False)
    create_video_file.add_argument('save_style', metavar="Save Style", widget="Dropdown", choices=['One Compilation Video', 'Separate Video Files'])

    return parser.parse_args()

# Code executed when start button is clicked
def main():
    args = prompt_user()

    if(args.action == 'Single_Subtitle_File'):
        source_file_video = args.source_file_video
        source_file_subtitle = args.source_file_subtitle

        key_phrase_input_raw = args.key_phrase_input_raw

        # Splits into multiple key phrases based on delimiter |@|
        key_phrase_list = key_phrase_input_raw.split('|@|')
        output_directory = args.output_directory

        ignore_spaces = not args.ignore_spaces
        ignore_punctuation = not args.ignore_punctuation
        case_sensitive = args.case_sensitive

        save_style = 'File for each video'

    elif(args.action == 'Batch_Subtitle_Files'):
        source_directory_video = args.source_directory_video
        ignore_video_input_raw = args.ignore_video_input_raw

        # Splits into multiple ignore phrases based on delimiter |@|
        ignore_video_list = ignore_video_input_raw.split('|@|')

        source_directory_subtitle = args.source_directory_subtitle
        ignore_subtitle_input_raw = args.ignore_subtitle_input_raw

        # Splits into multiple ignore phrases based on delimiter |@|
        ignore_subtitle_list = ignore_subtitle_input_raw.split('|@|')

        key_phrase_input_raw = args.key_phrase_input_raw

        # Splits into multiple key phrases based on delimiter |@|
        key_phrase_list = key_phrase_input_raw.split('|@|')

        save_style = args.save_style
        output_directory = args.output_directory

        ignore_spaces = not args.ignore_spaces
        ignore_punctuation = not args.ignore_punctuation
        case_sensitive = args.case_sensitive

        confidence_level = args.confidence_level/100

    elif(args.action == 'Create_Video_File'):
        source_file_subtitle_found = args.source_file_subtitle_found
        output_directory = args.output_directory
        buffer_time_start = args.buffer_time_start
        buffer_time_end = args.buffer_time_end
        save_style = args.save_style
    else:
        print("Invalid Action", flush=True)

    # Decides which function to call based menu name
    # Flush necessary for printing in order to use progressbar
    if(args.action == 'Single_Subtitle_File'):
        subtitle_functions.find_subtitle_matches_single(source_file_video, source_file_subtitle, key_phrase_list, output_directory, ignore_spaces, ignore_punctuation, case_sensitive, save_style)
        print("Done", flush=True)
            
    elif(args.action == 'Batch_Subtitle_Files'):
        subtitle_functions.find_subtitle_matches_batch(source_directory_subtitle, source_directory_video, output_directory, save_style, key_phrase_list, ignore_spaces, ignore_punctuation, case_sensitive, ignore_subtitle_list, ignore_video_list, confidence_level)
        print("Done", flush=True)

    elif(args.action == 'Create_Video_File'):
        if(save_style == 'One Compilation Video'):
            video_editing_functions.mergeMultipleClips(source_file_subtitle_found, output_directory, buffer_time_start, buffer_time_end)
            print("Done", flush=True)
        else:
            video_editing_functions.saveAsIndividualClips(source_file_subtitle_found, output_directory, buffer_time_start, buffer_time_end)
            print("Done", flush=True)
    else:
        print("Invalid Action", flush=True)

if __name__ == '__main__':
    main()